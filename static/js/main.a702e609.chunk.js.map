{"version":3,"sources":["Spinner/Spinner.js","Duration/Duration.js","index.js"],"names":["Spinner","defaultProps","size","thickness","fill","rotate","keyframes","_templateObject","Wrapper","styled","div","_templateObject2","props","isVisible","_ref","duration","_useState","useState","_useState2","Object","slicedToArray","spinnerDuration","setSpinnerDuration","_useState3","_useState4","setVisibility","useEffect","currentDurations","concat","toConsumableArray","timer","length","setInterval","newDurationArr","slice","clearInterval","react_default","a","createElement","Duration","visibility","className","style","map","index","rootElement","document","getElementById","ReactDOM","render","extendDuration","id","Spinner_Spinner","type","onClick","newDuration","Math","random","roundTo100","ceil","src_Duration_Duration"],"mappings":"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","file":"static/js/main.a702e609.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled, { keyframes } from \"styled-components\";\r\n\r\nSpinner.propTypes = {\r\n  duration: PropTypes.number.isRequired,\r\n  size: PropTypes.number,\r\n  thickness: PropTypes.number,\r\n  fill: PropTypes.string\r\n};\r\n\r\nSpinner.defaultProps = {\r\n  size: 100,\r\n  thickness: 16,\r\n  fill: \"#ffffff\"\r\n};\r\n\r\nconst rotate = keyframes`\r\n  from {\r\n    transform: rotate(0deg);\r\n  }\r\n\r\n  to {\r\n    transform: rotate(360deg);\r\n  }\r\n`;\r\nconst Wrapper = styled.div`\r\n  position: relative;\r\n  width: ${props => props.size}px;\r\n  height: ${props => props.size}px;\r\n  border-top: ${props => props.thickness}px solid ${props => props.fill}33;\r\n  border-right: ${props => props.thickness}px solid ${props => props.fill}33;\r\n  border-bottom: ${props => props.thickness}px solid ${props => props.fill}33;\r\n  border-left: ${props => props.thickness}px solid ${props => props.fill};\r\n  border-radius: 50%;\r\n  visibility: ${props => (props.isVisible ? \"visible\" : \"hidden\")}\r\n  transform: translateZ(0);\r\n  animation: ${rotate} 1.1s infinite linear;\r\n\r\n  &:after {\r\n    border-radius: 50%;\r\n    width: ${props => props.size}px;\r\n    height: ${props => props.size}px;\r\n  }\r\n`;\r\n\r\nfunction Spinner({ duration, size, thickness, fill }) {\r\n  const [spinnerDuration, setSpinnerDuration] = useState([]);\r\n  const [isVisible, setVisibility] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setSpinnerDuration(currentDurations => [...currentDurations, duration]);\r\n  }, [duration]);\r\n\r\n  useEffect(() => {\r\n    let timer;\r\n    if (spinnerDuration.length > 1) {\r\n      setVisibility(true);\r\n      timer = setInterval(() => {\r\n        const newDurationArr = spinnerDuration.slice(1);\r\n        setSpinnerDuration(newDurationArr);\r\n      }, spinnerDuration[0]);\r\n    }\r\n\r\n    if (spinnerDuration.length === 1) {\r\n      setVisibility(true);\r\n      timer = setInterval(() => {\r\n        setSpinnerDuration([]);\r\n      }, spinnerDuration[0]);\r\n    }\r\n\r\n    if (spinnerDuration.length === 0) {\r\n      setVisibility(false);\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(timer);\r\n    };\r\n  }, [spinnerDuration]);\r\n\r\n  return (\r\n    <Wrapper\r\n      isVisible={isVisible}\r\n      size={size}\r\n      thickness={thickness}\r\n      fill={fill}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Spinner;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport \"./Duration.css\";\r\n\r\nfunction Duration({ duration }) {\r\n  const [spinnerDuration, setSpinnerDuration] = useState([]);\r\n  const [isVisible, setVisibility] = useState(false);\r\n  const visibility = isVisible ? \"visible\" : \"hidden\";\r\n\r\n  useEffect(() => {\r\n    if (typeof duration === \"number\") {\r\n      setSpinnerDuration(currentDurations => [...currentDurations, duration]);\r\n    }\r\n  }, [duration]);\r\n\r\n  useEffect(() => {\r\n    let timer;\r\n    if (spinnerDuration.length > 1) {\r\n      setVisibility(true);\r\n      timer = setInterval(() => {\r\n        const newDurationArr = spinnerDuration.slice(1);\r\n        setSpinnerDuration(newDurationArr);\r\n      }, spinnerDuration[0]);\r\n    }\r\n\r\n    if (spinnerDuration.length === 1) {\r\n      setVisibility(true);\r\n      timer = setInterval(() => {\r\n        setSpinnerDuration([]);\r\n      }, spinnerDuration[0]);\r\n    }\r\n\r\n    if (spinnerDuration.length === 0) {\r\n      setVisibility(false);\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(timer);\r\n    };\r\n  }, [spinnerDuration]);\r\n\r\n  return <p className=\"duration\" style={{ visibility }}>[ {\r\n    spinnerDuration.map((duration, index) => {\r\n      return index === 0 ? `${duration}ms` : `, ${duration}ms`\r\n    })\r\n  } ]</p>;\r\n}\r\n\r\nexport default Duration;\r\n","import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Spinner } from \"./Spinner\";\r\nimport { Duration } from \"./Duration\";\r\n\r\nimport \"./styles.css\";\r\n\r\nfunction App() {\r\n  const [duration, extendDuration] = useState(3000);\r\n  function handleClick() {\r\n    const newDuration = Math.random() * (3000 - 1000) + 1000;\r\n    const roundTo100 = Math.ceil((newDuration + 1) / 100) * 100;\r\n    extendDuration(roundTo100);\r\n  }\r\n\r\n  return (\r\n    <div id=\"App\">\r\n      <Spinner duration={duration} size={100} thickness={16} fill=\"#ffffff\" />\r\n      <button type=\"button\" id=\"extend\" onClick={handleClick}>\r\n        Extend duration\r\n      </button>\r\n      <Duration duration={duration} />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n"],"sourceRoot":""}